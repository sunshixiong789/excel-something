{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","useState","selectOne","setSelectOne","selectTwo","setSelectTwo","oneList","twoList","beforeUpload","file","className","style","marginTop","margin","span","type","onClick","length","Axios","post","then","value","window","open","message","error","justify","hoverable","action","onChange","response","data","name","icon","UploadOutlined","Group","width","checkedValue","map","key","display","clear","position","bottom","textAlign","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"saAuIeA,EAzHO,WAAO,IAAD,EACQC,mBAAqB,IAD7B,mBACnBC,EADmB,KACRC,EADQ,OAEQF,mBAAqB,IAF7B,mBAEnBG,EAFmB,KAERC,EAFQ,KAGtBC,EAAiB,GACjBC,EAAiB,GACfC,EAAe,SAACC,GAMpB,OAAO,GAkBT,OACE,yBAAKC,UAAU,MAAMC,MAAO,CAAEC,UAAW,KACvC,uBAAKD,MAAO,CAAEE,OAAQ,KACpB,uBAAKC,KAAM,IACT,uBACEC,KAAM,UACNC,QAAS,WACgB,IAAnBV,EAAQW,QAAmC,IAAnBV,EAAQU,OAIhCX,EAAQW,SAAWV,EAAQU,OAI/BC,IAAMC,KAAK,iBAAkB,CAAEb,UAASC,YAAWa,MAAK,SAAAC,GACtDC,OAAOC,KAAK,sCAAuC,aAJnDC,EAAA,EAAQC,MAAM,8CAJdD,EAAA,EAAQC,MAAM,sDAJpB,0CAoBJ,uBAAKC,QAAS,gBACZ,uBAAKZ,KAAM,IACT,uBAAMa,WAAW,GACf,uBACEC,OAAQ,QACRpB,aAAcA,EACdqB,SA9CY,SAACpB,GACnBA,EAAKA,KAAKqB,UACZ3B,EAAaM,EAAKA,KAAKqB,WA6CfC,KAAM,CAAEC,KAAM,WAEd,uBAAQC,KAAM,kBAACC,EAAA,EAAD,OAAd,6BAEF,sBAAUC,MAAV,CAAgBxB,MAAO,CAAEyB,MAAO,QAAUP,SAzChC,SAACQ,GACnB/B,EAAU+B,IAyCA,uBAAKX,QAAS,SACXxB,EAAUoC,KAAI,SAAAjB,GACb,OACE,uBAAKkB,IAAKlB,EAAMkB,IAAKzB,KAAM,GACzB,yBAAKH,MAAO,CAAE6B,QAAS,SACrB,uBAAUnB,MAAOA,EAAMkB,KAAMlB,EAAMA,gBASnD,uBAAKP,KAAM,IACT,uBAAMa,WAAW,GACf,uBACEC,OAAQ,QACRpB,aAAcA,EACdqB,SAlEY,SAACpB,GACnBA,EAAKA,KAAKqB,UACZzB,EAAaI,EAAKA,KAAKqB,WAiEfC,KAAM,CAAEC,KAAM,WAEd,uBAAQC,KAAM,kBAACC,EAAA,EAAD,OAAd,6BAEF,sBAAUC,MAAV,CAAgBxB,MAAO,CAAEyB,MAAO,QAAUP,SA/DhC,SAACQ,GACnB9B,EAAU8B,IA+DA,uBAAKX,QAAS,SACXtB,EAAUkC,KAAI,SAAAjB,GACb,OACE,uBAAKkB,IAAKlB,EAAMkB,IAAKzB,KAAM,GACzB,yBAAKH,MAAO,CAAE6B,QAAS,SACrB,uBAAUnB,MAAOA,EAAMkB,KAAMlB,EAAMA,iBAUrD,yBACEV,MAAO,CACL8B,MAAO,OACPD,QAAS,QACTE,SAAU,WACVN,MAAM,OACNO,OAAQ,OACRC,UAAU,WAPd,gDC3GcC,QACW,cAA7BvB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,MAAK,SAAAoC,GACjCA,EAAaC,kB","file":"static/js/main.0f3a8621.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Button, Card, Checkbox, Col, message, Row, Upload } from \"antd\";\n\nimport { UploadOutlined } from \"@ant-design/icons\";\nimport { UploadChangeParam } from \"antd/es/upload\";\nimport { CheckboxValueType } from \"antd/lib/checkbox/Group\";\nimport Axios from \"axios\";\n\ninterface KeyModel {\n  key: number;\n  value: string;\n}\n\nconst App: React.FC = () => {\n  const [selectOne, setSelectOne] = useState<KeyModel[]>([]);\n  const [selectTwo, setSelectTwo] = useState<KeyModel[]>([]);\n  let oneList: any[] = [];\n  let twoList: any[] = [];\n  const beforeUpload = (file: any) => {\n    /*const isPNG = file.type === \"image/png\";\n    if (!isPNG) {\n      message.error(\"仅支持 xls 格式的文件!\");\n    }\n    return isPNG;*/\n    return true;\n  };\n  const handleChangeOne = (file: UploadChangeParam) => {\n    if (file.file.response) {\n      setSelectOne(file.file.response);\n    }\n  };\n  const handleChangeTwo = (file: UploadChangeParam) => {\n    if (file.file.response) {\n      setSelectTwo(file.file.response);\n    }\n  };\n  const onChangeOne = (checkedValue: CheckboxValueType[]) => {\n    oneList = checkedValue;\n  };\n  const onChangeTwo = (checkedValue: CheckboxValueType[]) => {\n    twoList = checkedValue;\n  };\n  return (\n    <div className=\"App\" style={{ marginTop: 40 }}>\n      <Row style={{ margin: 10 }}>\n        <Col span={24}>\n          <Button\n            type={\"primary\"}\n            onClick={() => {\n              if (oneList.length === 0 || twoList.length === 0) {\n                message.error(\"请选择要比对的行\");\n                return;\n              }\n              if (oneList.length !== twoList.length) {\n                message.error(\"比较的行数不同\");\n                return;\n              }\n              Axios.post(\"/file/downLoad\", { oneList, twoList }).then(value => {\n                window.open(\"http://localhost:8080/file/getExcel\", \"_blank\");\n              });\n            }}\n          >\n            导出生成表格\n          </Button>\n        </Col>\n      </Row>\n      <Row justify={\"space-around\"}>\n        <Col span={11}>\n          <Card hoverable={true}>\n            <Upload\n              action={\"/file\"}\n              beforeUpload={beforeUpload}\n              onChange={handleChangeOne}\n              data={{ name: \"table1\" }}\n            >\n              <Button icon={<UploadOutlined />}>上传主表</Button>\n            </Upload>\n            <Checkbox.Group style={{ width: \"100%\" }} onChange={onChangeOne}>\n              <Row justify={\"start\"}>\n                {selectOne.map(value => {\n                  return (\n                    <Col key={value.key} span={6}>\n                      <div style={{ display: \"flex\" }}>\n                        <Checkbox value={value.key}>{value.value}</Checkbox>\n                      </div>\n                    </Col>\n                  );\n                })}\n              </Row>\n            </Checkbox.Group>\n          </Card>\n        </Col>\n        <Col span={11}>\n          <Card hoverable={true}>\n            <Upload\n              action={\"/file\"}\n              beforeUpload={beforeUpload}\n              onChange={handleChangeTwo}\n              data={{ name: \"table2\" }}\n            >\n              <Button icon={<UploadOutlined />}>上传次表</Button>\n            </Upload>\n            <Checkbox.Group style={{ width: \"100%\" }} onChange={onChangeTwo}>\n              <Row justify={\"start\"}>\n                {selectTwo.map(value => {\n                  return (\n                    <Col key={value.key} span={6}>\n                      <div style={{ display: \"flex\" }}>\n                        <Checkbox value={value.key}>{value.value}</Checkbox>\n                      </div>\n                    </Col>\n                  );\n                })}\n              </Row>\n            </Checkbox.Group>\n          </Card>\n        </Col>\n      </Row>\n      <div\n        style={{\n          clear: \"both\",\n          display: \"block\",\n          position: \"absolute\",\n          width:\"100%\",\n          bottom: \"20px\",\n          textAlign:\"center\"\n        }}\n      >\n        乐山中支科技科\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}